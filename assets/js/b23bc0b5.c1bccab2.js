"use strict";(self.webpackChunkcka_prep_2=self.webpackChunkcka_prep_2||[]).push([[1251],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||a;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7935:function(e,t,n){n.d(t,{o:function(){return r}});var i=n(7294);function r(e){return i.createElement("div",{style:{borderRadius:"10px"}},i.createElement(o,null),i.createElement(l,{lines:e.lines}))}function a(e){return i.createElement("div",{style:{backgroundColor:e.buttonColor,borderRadius:"100%",width:"10px",height:"10px",margin:"3px"}})}function o(){return i.createElement("div",{style:{display:"flex",backgroundColor:"#edeeef",padding:"6px",borderTopLeftRadius:"10px",borderTopRightRadius:"10px"}},i.createElement(a,{buttonColor:"#FF605C"}),i.createElement(a,{buttonColor:"#FFBD44"}),i.createElement(a,{buttonColor:"#00CA4E"}))}function s(e){var t=e.dir?e.dir:"~",n=e.node?e.node:"cp";return i.createElement("p",{style:{margin:"0px",padding:"2px"}},"ubuntu@"+n+":"+t+" $ "+e.text)}function l(e){console.log(e.lines);var t=e.lines.map((function(e){return i.createElement(s,{text:e.text,dir:e.dir})}));return i.createElement("div",{style:{backgroundColor:"black",color:"#00ff01",fontFamily:"monospace",borderBottomLeftRadius:"10px",borderBottomRightRadius:"10px",paddingTop:"5px",paddingBottom:"5px",paddingLeft:"4px",marginBottom:"10px"}},t)}},7944:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=(n(7935),["components"]),s={id:"chapter15",title:"Security"},l=void 0,u={unversionedId:"fundamentals/chapter15",id:"fundamentals/chapter15",title:"Security",description:"Course Reading",source:"@site/docs/fundamentals/chapter15.md",sourceDirName:"fundamentals",slug:"/fundamentals/chapter15",permalink:"/cka-prep/docs/fundamentals/chapter15",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fundamentals/chapter15.md",tags:[],version:"current",frontMatter:{id:"chapter15",title:"Security"},sidebar:"tutorialSidebar",previous:{title:"Custom Resource Definitions",permalink:"/cka-prep/docs/fundamentals/chapter14"},next:{title:"High Availability",permalink:"/cka-prep/docs/fundamentals/chapter16"}},c=[{value:"Course Reading",id:"course-reading",children:[{value:"Learning objectives",id:"learning-objectives",children:[],level:3},{value:"Overview",id:"overview",children:[],level:3},{value:"Cloud security considerations",id:"cloud-security-considerations",children:[],level:3},{value:"Accessing the API",id:"accessing-the-api",children:[],level:3},{value:"Authentication",id:"authentication",children:[],level:3},{value:"Authorization",id:"authorization",children:[],level:3},{value:"RBAC and webhook modes",id:"rbac-and-webhook-modes",children:[{value:"RBAC",id:"rbac",children:[],level:4},{value:"Webhook",id:"webhook",children:[],level:4}],level:3},{value:"Admission controller",id:"admission-controller",children:[],level:3},{value:"Security contexts",id:"security-contexts",children:[],level:3},{value:"Pod security policies",id:"pod-security-policies",children:[],level:3},{value:"Network security policies",id:"network-security-policies",children:[],level:3}],level:2}],d={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"course-reading"},"Course Reading"),(0,a.kt)("h3",{id:"learning-objectives"},"Learning objectives"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Explain the flow of API requests"),(0,a.kt)("li",{parentName:"ul"},"Configure authorization rules"),(0,a.kt)("li",{parentName:"ul"},"Examine authentication policies"),(0,a.kt)("li",{parentName:"ul"},"Use network policies to restrict traffic")),(0,a.kt)("h3",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Security is a very broad and complex topic, this section will cover it as it relates to Kubernetes specifically."),(0,a.kt)("p",null,"This will include the following topics:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Authentication and authorization with the API server"),(0,a.kt)("li",{parentName:"ul"},"RBAC"),(0,a.kt)("li",{parentName:"ul"},"The admission control system"),(0,a.kt)("li",{parentName:"ul"},"Securing pods more tightly with security contexts and security policies"),(0,a.kt)("li",{parentName:"ul"},"Network policies")),(0,a.kt)("h3",{id:"cloud-security-considerations"},"Cloud security considerations"),(0,a.kt)("p",null,"When running Kubernetes in the cloud (or any other software for that matter), the first consideration is to ensure the hardware, firmware, and OS you are running on are secure and hardened.  Once this is ensured, you can start securing the software itself.  In Kubernetes, the first thing that should be secured is the kube-apiserver, which has a list of considerations, tools, and settings to limit and control the access to it."),(0,a.kt)("p",null,"Since Kubernetes is a network heavy runtime, securing the network inside the cluster, like with a NetworkPolicy, and outside tools like firewalls is important."),(0,a.kt)("p",null,"The next layer of security is the application level. The applications run inside Kubernetes should be secured through means of minimizing base images used, container immutability, and through the use of static/runtime analysis tools.  These steps are often done during the development process or when building the CI/CD pipeline.  Things like AppArmor and SELinux should be used to further protect an environment from malicious containers."),(0,a.kt)("p",null,"It is also important to continually be checking for vulnerabilities. Security is not just getting the settings and configuration right on the first deployment."),(0,a.kt)("h3",{id:"accessing-the-api"},"Accessing the API"),(0,a.kt)("p",null,"Any action performed in a Kubernetes cluster must go through the API. Each request to the API goes through 3 main steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Authentication (token)"),(0,a.kt)("li",{parentName:"ul"},"Authorization (RBAC)"),(0,a.kt)("li",{parentName:"ul"},"Admission controller")),(0,a.kt)("p",null,"When the API receives a request, the authentication step is first by going through whatever the configured authentication module is.  If authentication fails, then the request is rejected.  If it succeeds, then the request is passed to the authorization step."),(0,a.kt)("p",null,"The authorization step checks the request against existing policies. If the user has the correct permissions to perform the requested action, the request will then pass to admission. If not the request is rejected at this step."),(0,a.kt)("p",null,"Finally, the admission step is generally responsible for the validation in the content of the request. If validation succeeds, then the request succeeds."),(0,a.kt)("p",null,"Additionally, the request is received encrypted using TLS.  When creating a cluster with ",(0,a.kt)("inlineCode",{parentName:"p"},"kubeadm")," this is done manually.  You can learn more about how the API server is configured ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/"},"here"),". More about access control in Kubernetes can be learned in the docs ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/security/controlling-access/"},"here"),"."),(0,a.kt)("h3",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"There are 3 things to remember when it comes to auth in Kubernetes."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Auth is done with certificates, tokens, or username/password (in it's most basic form)"),(0,a.kt)("li",{parentName:"ul"},"Users aren't created by the API and should be managed elsewhere externally"),(0,a.kt)("li",{parentName:"ul"},"Processes use system accounts to access the API (more on that ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"},"here"),")")),(0,a.kt)("p",null,"Additionally there are two other advanced auth methods, webhooks to verify a bearer token, and with external OpenID providers."),(0,a.kt)("p",null,"The type of authentication used is determined to by the kube-apiservers startup options.  Here are some examples of startup options that can be used."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--basic-auth-file")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--oidc-issuer-url")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--token-auth-file")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--authorization-webhook-config-file"))),(0,a.kt)("p",null,"More than one authentication module can be used.  Module options are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"x509 client certs"),(0,a.kt)("li",{parentName:"ul"},"static, bearer, or bootstrap tokens"),(0,a.kt)("li",{parentName:"ul"},"static password file"),(0,a.kt)("li",{parentName:"ul"},"service account"),(0,a.kt)("li",{parentName:"ul"},"OpenID connect token")),(0,a.kt)("p",null,"Each module in use is tried until successful, and the order is not guaranteed.  Anonymous access is also available to be enabled, otherwise a 401 response is returned."),(0,a.kt)("p",null,"More info about Kubernetes authentication can be ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/authentication/"},"found in the docs"),"."),(0,a.kt)("h3",{id:"authorization"},"Authorization"),(0,a.kt)("p",null,"There are two main modes of authorization, RBAC and webhooks.  These are also configured using kube-apiserver startup options.  Some examples are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--authorization-mode=RBAC")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--authorization-mode=Webhook")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--authorization-mode=AlwaysDeny")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--authorization-mode=AlwaysAllow"))),(0,a.kt)("p",null,"The different authorization modes implement policies.  Request attributes are then checked against the policies."),(0,a.kt)("h3",{id:"rbac-and-webhook-modes"},"RBAC and webhook modes"),(0,a.kt)("h4",{id:"rbac"},"RBAC"),(0,a.kt)("p",null,"RBAC is short for Role Based Access Control."),(0,a.kt)("p",null,"All objects you can create in Kubernetes are modelled in the API and each object belongs to some group.  The resources allow for standard CRUD operations.  In Kubernetes YAML manifests, these operations are called ",(0,a.kt)("strong",{parentName:"p"},"verbs"),".  "),(0,a.kt)("p",null,"On top of these basic operations are rules, which act upon API groups, and roles are made up of sets or rules.  These roles scope a single namespace, or with ",(0,a.kt)("inlineCode",{parentName:"p"},"ClusterRoles")," give scope across the entire cluster."),(0,a.kt)("p",null,"These operations act on 1 or 3 subjects, user accounts (these are not API objects), service accounts, and groups (know as ",(0,a.kt)("inlineCode",{parentName:"p"},"clusterrolebinding")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl"),").  RBAC then writes rules to allow or deny the requested operation by the user, role, or group."),(0,a.kt)("p",null,"RBAC is complex but the basic flow is as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Determine/create namespace"),(0,a.kt)("li",{parentName:"ul"},"Create a cert for the user against the cluster CA. Since users aren't API objects outside auth is required, such as OpenSSL certs."),(0,a.kt)("li",{parentName:"ul"},"Set credential for the user to the namespace using a context"),(0,a.kt)("li",{parentName:"ul"},"Create a role for the expected tasks"),(0,a.kt)("li",{parentName:"ul"},"Bind the user to the role"),(0,a.kt)("li",{parentName:"ul"},"Verify user has limited access")),(0,a.kt)("p",null,"Learn more about RBAC in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/"},"official docs"),"."),(0,a.kt)("h4",{id:"webhook"},"Webhook"),(0,a.kt)("p",null,"Webhooks are HTTP callbacks, usually a POST request that occurs when something happens to act as an event-notification.  Web applications that implement webhooks send POST requests to a URL when certain events occur."),(0,a.kt)("p",null,"More about Kubernetes' webhooks mode can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/webhook/"},"official docs"),"."),(0,a.kt)("h3",{id:"admission-controller"},"Admission controller"),(0,a.kt)("p",null,"The final step for allowing an API request is admission control."),(0,a.kt)("p",null,"An admission controller is software that has access to the content of the objects being requested. They will modify or validate this content and are the last layer that can deny the request."),(0,a.kt)("p",null,"Starting in v1.13 of the kube-apiserver, admission controllers are compiled into the binary, instead of a list passed during execution.Admissions controllers are now needed for certain features to work and is not consider a mature feature.  To enable or disable certain admission controller plugins, you can pass startup options to the kube-apiserver.  Some examples:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--enable-admission-plugins=Initializers,NamespaceLifecycle,LimitRanger")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--disable-admission-plugins=PodNodeSelector"))),(0,a.kt)("p",null,"Change the names of the plugins you want to enable and disable."),(0,a.kt)("p",null,"You can learn more about each of the admission controllers and what they do in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do"},"official docs"),"."),(0,a.kt)("h3",{id:"security-contexts"},"Security contexts"),(0,a.kt)("p",null,"You can set security limitations on pods using what is called a security context.  These can be defined at the pod or container level as part of the manifest for the resource."),(0,a.kt)("p",null,"Some examples of what you may use this for are "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"limit UID of a process"),(0,a.kt)("li",{parentName:"ul"},"limit Linux capabilities"),(0,a.kt)("li",{parentName:"ul"},"filesystem group limitations")),(0,a.kt)("p",null,"Another example would be preventing a process from running as the root user. The definition of a Pod using this security context would look something like the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  securityContext:\n    runAsNonRoot: true\n  containers:\n  - image: nginx\n    name: nginx\n")),(0,a.kt)("p",null,"When you try to deploy this pod to the cluster, it would fail and never become ready since ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx")," runs as the root user, but the security context would prevent this."),(0,a.kt)("p",null,"More about configuring security contexts can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"},"official docs"),"."),(0,a.kt)("h3",{id:"pod-security-policies"},"Pod security policies"),(0,a.kt)("p",null,"Pod security policies (PSPs) automate the enforcement of security contexts.  A PSP is defined as a standard Kubernetes manifest like any other standard API object.  The policies are cluster level and govern what pods can do (including access permissions, what users to run as, etc)."),(0,a.kt)("p",null,"Similar to the example in the ",(0,a.kt)("a",{parentName:"p",href:"#security-contexts"},"security contexts section"),", if you wanted to make sure all pods are not able to run as root, the you could define a PSP to enforce this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted\nspec:\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  runAsUser:\n    rule: MustRunAsNonRoot\n  fsGroup:\n    rule: RunAsAny\n")),(0,a.kt)("p",null,"For PSPs to be enabled, their associated admission controller plugin must be configured. These pair well with RBAC configuration to fine tune what users are allowed to run and the low level permissions their containers will have."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"PSPs have been depreciated in v1.25 and their replacement, Pod Security Admission is in alpha"))),(0,a.kt)("h3",{id:"network-security-policies"},"Network security policies"))}p.isMDXComponent=!0}}]);