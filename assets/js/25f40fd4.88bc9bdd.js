"use strict";(self.webpackChunkcka_prep_2=self.webpackChunkcka_prep_2||[]).push([[3838],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7935:function(e,t,n){n.d(t,{o:function(){return i}});var a=n(7294);function i(e){return a.createElement("div",{style:{borderRadius:"10px"}},a.createElement(r,null),a.createElement(s,{lines:e.lines}))}function o(e){return a.createElement("div",{style:{backgroundColor:e.buttonColor,borderRadius:"100%",width:"10px",height:"10px",margin:"3px"}})}function r(){return a.createElement("div",{style:{display:"flex",backgroundColor:"#edeeef",padding:"6px",borderTopLeftRadius:"10px",borderTopRightRadius:"10px"}},a.createElement(o,{buttonColor:"#FF605C"}),a.createElement(o,{buttonColor:"#FFBD44"}),a.createElement(o,{buttonColor:"#00CA4E"}))}function l(e){var t=e.dir?e.dir:"~",n=e.node?e.node:"cp";return a.createElement("p",{style:{margin:"0px",padding:"2px"}},"ubuntu@"+n+":"+t+" $ "+e.text)}function s(e){console.log(e.lines);var t=e.lines.map((function(e){return a.createElement(l,{text:e.text,dir:e.dir})}));return a.createElement("div",{style:{backgroundColor:"black",color:"#00ff01",fontFamily:"monospace",borderBottomLeftRadius:"10px",borderBottomRightRadius:"10px",paddingTop:"5px",paddingBottom:"5px",paddingLeft:"4px",marginBottom:"10px"}},t)}},9142:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=n(7935),l=["components"],s={id:"chapter13",title:"Logging and Troubleshooting"},u=void 0,d={unversionedId:"fundamentals/chapter13",id:"fundamentals/chapter13",title:"Logging and Troubleshooting",description:"Course Reading",source:"@site/docs/fundamentals/chapter13.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/chapter13",permalink:"/cka-prep/docs/fundamentals/chapter13",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fundamentals/chapter13.mdx",tags:[],version:"current",frontMatter:{id:"chapter13",title:"Logging and Troubleshooting"},sidebar:"tutorialSidebar",previous:{title:"Scheduling",permalink:"/cka-prep/docs/fundamentals/chapter12"},next:{title:"Custom Resource Definitions",permalink:"/cka-prep/docs/fundamentals/chapter14"}},p=[{value:"Course Reading",id:"course-reading",children:[{value:"Learning objectives",id:"learning-objectives",children:[],level:3},{value:"Overview",id:"overview",children:[],level:3},{value:"Basic troubleshooting steps",id:"basic-troubleshooting-steps",children:[],level:3},{value:"Ephemeral containers",id:"ephemeral-containers",children:[],level:3},{value:"Cluster start sequence",id:"cluster-start-sequence",children:[],level:3},{value:"Monitoring",id:"monitoring",children:[],level:3},{value:"Using <code>krew</code>",id:"using-krew",children:[{value:"Example: Sniffing traffic with Wireshark",id:"example-sniffing-traffic-with-wireshark",children:[],level:4}],level:3},{value:"Logging tools",id:"logging-tools",children:[],level:3},{value:"Additional troubleshooting resources",id:"additional-troubleshooting-resources",children:[],level:3}],level:2},{value:"Lab Exercises",id:"lab-exercises",children:[{value:"Lab 13.1 - Review log file locations",id:"lab-131---review-log-file-locations",children:[],level:3},{value:"13.2 - Viewing log output",id:"132---viewing-log-output",children:[],level:3},{value:"13.3 - Adding tools for monitoring and metrics",id:"133---adding-tools-for-monitoring-and-metrics",children:[{value:"Configure dashboard",id:"configure-dashboard",children:[],level:4}],level:3}],level:2}],c={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"course-reading"},"Course Reading"),(0,o.kt)("h3",{id:"learning-objectives"},"Learning objectives"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Understand Kubernetes doesn't have integrated logging yet"),(0,o.kt)("li",{parentName:"ul"},"Learn what external tools are used to aggregate logs"),(0,o.kt)("li",{parentName:"ul"},"Learn basic troubleshooting flow"),(0,o.kt)("li",{parentName:"ul"},"Discuss the use of side-cars for in-pod logs")),(0,o.kt)("h3",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Because Kubernetes depends on API calls, it is sensitive to networking issues.  Standard Linux tools can be the best for debugging issues on a cluster. If the pod you are trying to troubleshoot does not have a shell, you may need to deploy a sidecar container in that pod that has a shell to debug. DNS configuration tools like ",(0,o.kt)("inlineCode",{parentName:"p"},"dig")," are a good start, but as issues become more complex you may need to install more powerful tools like ",(0,o.kt)("inlineCode",{parentName:"p"},"tcpdump"),"."),(0,o.kt)("p",null,"Large and diverse clusters have can become difficult to track, so it is essential to be able to monitor.  By monitoring we mean being able to collect the most important metrics about cluster health, like CPU, memory, and disk usage, as well as network bandwidth. Above that, we may also want to monitor the key aspects of the application deployed in the cluster."),(0,o.kt)("p",null,"The Metric Server can be installed on the cluster to expose a standard API which can be consumed by other agents. Once installed the endpoint can be found on the cp node at ",(0,o.kt)("inlineCode",{parentName:"p"},"/apis/metrics/k8s.io/"),"."),(0,o.kt)("p",null,"Logging the activity across all nodes is also not something currently built into Kubernetes. For this, something like ",(0,o.kt)("a",{parentName:"p",href:"https://www.fluentd.org/"},"Fluentd")," is useful to implement a unified logging layer on the cluster.  Having an aggregated logging layer can allow for better visualization of a potential issue and gives the ability to globally search logs from the cluster.  This is a good place to start looking if networking issues aren't the root cause."),(0,o.kt)("p",null,"Another options is ",(0,o.kt)("a",{parentName:"p",href:"https://prometheus.io/"},"Prometheus"),", which combines logging, metrics, and alerting capabilities. Prometheus also integrates well with dashboarding tools like ",(0,o.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/"},"Grafana"),"."),(0,o.kt)("p",null,"There are also a handful of very useful commands withing ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," to help in troubleshooting issues across the cluster."),(0,o.kt)("h3",{id:"basic-troubleshooting-steps"},"Basic troubleshooting steps"),(0,o.kt)("p",null,"Troubleshoot should start with the obvious. If there are errors coming from the command line, those should be addressed first. The symptoms of the issue will often determine the next steps if troubleshooting continues past the first things checked.  Often it is a good idea to debug from the running container as long as it has a shell that can be accessed, typically by running "),(0,o.kt)(r.o,{lines:[{text:"kubectl exec -it <pod_name> -- /bin/sh"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"If the pod is running, it is good to check the logs with "),(0,o.kt)(r.o,{lines:[{text:"kubectl logs <pod_name>"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"This will give the standard output of the running container. If you have no logs, you may want to deploy a sidecar to generate and handle logs.  "),(0,o.kt)("p",null,"The next step would usually be networking, which would include DNS firewalls, and general connectivity.  This is done with the traditional Linux tools to debug networking issues."),(0,o.kt)("p",null,"If networking was not the root cause, then security may be the next thing to check. RBAC (which is discussed later), SELinux, and AppArmor are all common issues, especially with network-centric applications."),(0,o.kt)("p",null,"Newer Kubernetes features allow for auditing on the kube-apiserver, which is useful for viewing actions after API calls have been accepted."),(0,o.kt)("p",null,"In summary, the general troubleshooting flow is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Errors in the command line"),(0,o.kt)("li",{parentName:"ul"},"Pod logs and status"),(0,o.kt)("li",{parentName:"ul"},"Network troubleshooting in the pod's container"),(0,o.kt)("li",{parentName:"ul"},"Checking node logs to ensure enough resources are available"),(0,o.kt)("li",{parentName:"ul"},"Security (RBAC, SELinux, AppArmor)"),(0,o.kt)("li",{parentName:"ul"},"API calls to and from the API"),(0,o.kt)("li",{parentName:"ul"},"Enable kube-apiserver auditing"),(0,o.kt)("li",{parentName:"ul"},"Networking issues between nodes (DNS and firewall)"),(0,o.kt)("li",{parentName:"ul"},"cp node controllers (controlling pods in a pending or errored state)")),(0,o.kt)("h3",{id:"ephemeral-containers"},"Ephemeral containers"),(0,o.kt)("p",null,"Added in v1.16 (beta as of v1.23, and stable as of v1.25), Kubernetes allow for a container to be added to an already running pod.  This allows us to deploy a fully-featured container to an existing pod so we do not need to terminate and re-create. This is helpful, especially if the issue is intermittent or difficult to reproduce."),(0,o.kt)("p",null,"Ephemeral container are added via the ",(0,o.kt)("inlineCode",{parentName:"p"},"ephemeralcontainers")," handler via API call, not via the podSpec.  Therefore, ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl edit")," cannot be used."),(0,o.kt)("p",null,"Instead you could use a ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl attach")," to join an existing process in the container.  This may be helpful instead of a ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl exec"),".  The functionality depend on the process being attached to."),(0,o.kt)("p",null,"You can deploy a new ephemeral container with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl debug"),"."),(0,o.kt)("h3",{id:"cluster-start-sequence"},"Cluster start sequence"),(0,o.kt)("p",null,"Cluster startup beings with systemd (when originally built with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubeadm"),", may use another method for other initialization tools).  You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"systemctl status kubelet.service")," to see the current state and which configuration files are used to run the kubelet. The service uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/kubelet.service.d/10-kubeadm.conf")," to start-up the kubelet."),(0,o.kt)("p",null,"The service status shows ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/lib/kubelet/config.yaml")," as the configuration file use to set certain setting of the kubelet binary.  One important setting is the ",(0,o.kt)("inlineCode",{parentName:"p"},"staticPodPath")," which specifies where the kubelet will ready every YAML file to start a pod.  By default it is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/kubernetes/manifests/"),".  Adding a yaml file here can be useful for troubleshooting the scheduler, as any request to the scheduler should create that pod."),(0,o.kt)("p",null,"Four default YAMLs start the base pods necessary for the kube-apiserver, etcd, kube-controller-manager, and kube-scheduler."),(0,o.kt)("p",null,"Once these four are up and running, the rest of the configured objects are created."),(0,o.kt)("h3",{id:"monitoring"},"Monitoring"),(0,o.kt)("p",null,"Monitoring can be summarized as collecting metrics from the infrastructure and applications running on it."),(0,o.kt)("p",null,"Kubernetes used to use the now depreciated ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-retired/heapster"},"Heapster"),".  Instead, Kubernetes now has an integrated metrics server, which once set up, exposes a standard API for other agent to leverage.  Custom metrics can also be exposed and used. Once example might be an autoscaler using a custom metric to determine when a new node needs to be scaled."),(0,o.kt)("p",null,"Tools like Prometheus, OpenTelemetry, and Jaegar are often used for these use cases."),(0,o.kt)("h3",{id:"using-krew"},"Using ",(0,o.kt)("inlineCode",{parentName:"h3"},"krew")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," has the ability to be extended with plugins.  Plugins cannot override existing ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," commands or add subcommands to them.  Declaration of namespace or container must come after the plugin name, for example:"),(0,o.kt)(r.o,{lines:[{text:"kubectl sniff some-pod -c primary-container -n different-namespace"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"One of the best ways to discover and install new plugins is with ",(0,o.kt)("inlineCode",{parentName:"p"},"krew"),", which is a plugin manager for ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),".  You can find out more about installing it on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/krew/"},(0,o.kt)("inlineCode",{parentName:"a"},"krew")," Github repo"),"."),(0,o.kt)("p",null,"Once installed you could run ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl krew help")," to view the documentation on how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"krew"),"."),(0,o.kt)("p",null,"More info about extending ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/"},"official docs"),"."),(0,o.kt)("p",null,"Once ",(0,o.kt)("inlineCode",{parentName:"p"},"krew")," is installed, make sure to add it to your ",(0,o.kt)("inlineCode",{parentName:"p"},"PATH")),(0,o.kt)(r.o,{lines:[{text:'export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"'}],mdxType:"Terminal"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Subcommand"),(0,o.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"help")),(0,o.kt)("td",{parentName:"tr",align:null},"Explain usage of rest of commands")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"info")),(0,o.kt)("td",{parentName:"tr",align:null},"Shows info about ",(0,o.kt)("inlineCode",{parentName:"td"},"kubectl")," plugin specified")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"install")),(0,o.kt)("td",{parentName:"tr",align:null},"Add new plugin to ",(0,o.kt)("inlineCode",{parentName:"td"},"kubectl"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"list")),(0,o.kt)("td",{parentName:"tr",align:null},"Show installed plugins")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"search")),(0,o.kt)("td",{parentName:"tr",align:null},"Search for new plugins")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"uninstall")),(0,o.kt)("td",{parentName:"tr",align:null},"Uninstall an existing plugin")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"update")),(0,o.kt)("td",{parentName:"tr",align:null},"Update local plugin index")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"upgrade")),(0,o.kt)("td",{parentName:"tr",align:null},"Upgrades local plugin index to newer version")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"version")),(0,o.kt)("td",{parentName:"tr",align:null},"Get version info for ",(0,o.kt)("inlineCode",{parentName:"td"},"krew"))))),(0,o.kt)("h4",{id:"example-sniffing-traffic-with-wireshark"},"Example: Sniffing traffic with Wireshark"),(0,o.kt)("p",null,"Cluster network traffic is encrypted which makes debugging potential networking issues more challenging. The ",(0,o.kt)("inlineCode",{parentName:"p"},"sniff")," plugin for ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," allows you to view traffic from within. It requires Wireshark to view graphical info."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"sniff")," uses the first container found unless specified with the ",(0,o.kt)("inlineCode",{parentName:"p"},"-c")," option. Here's an example of its use:"),(0,o.kt)(r.o,{lines:[{text:"kubectl sniff <pod name> -c <container name>"}],mdxType:"Terminal"}),(0,o.kt)("h3",{id:"logging-tools"},"Logging tools"),(0,o.kt)("p",null,"Logging, like monitoring, is a vast topic with many available tools."),(0,o.kt)("p",null,"Typically logs will be collected and aggregated locally before being ingested into some search engine.  Many software stacks exist for this purpose, with the most common being the ELK stack (Elasticsearch, Logstash, Kibana)."),(0,o.kt)("p",null,"The kubelet writes logs to local files, which the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl log")," command retrieves. For cluster-wide log aggregation, something like `Fluentd can be used.  The official Kubernetes docs also describe ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/cluster-administration/logging/"},"how to architect")," a logging solution."),(0,o.kt)("h3",{id:"additional-troubleshooting-resources"},"Additional troubleshooting resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/debug/debug-application/"},"Troubleshooting applications")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/debug/debug-cluster/"},"Troubleshooting clusters")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/kubernetes/kubernetes/issues"},"Kubernetes issues"))),(0,o.kt)("h2",{id:"lab-exercises"},"Lab Exercises"),(0,o.kt)("h3",{id:"lab-131---review-log-file-locations"},"Lab 13.1 - Review log file locations"),(0,o.kt)("p",null,"If using a systemd based cluster, you can view the node level kubelet logs with ",(0,o.kt)("inlineCode",{parentName:"p"},"journalctl"),". Each node will have different logs as they are specific to each node."),(0,o.kt)(r.o,{lines:[{text:"journalctl -u kubelet | less"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"Many major processes for the cluster are containerized. An example of finding and then viewing those logs for the kube-apiserver would be:"),(0,o.kt)(r.o,{lines:[{text:'sudo find / -name "*apiserver*log"'},{text:"sudo less <path to log file>"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"You could do something simlar to find logs for things like the kube-proxy, CoreDNS, the kube-scheduler, and other controllers."),(0,o.kt)("p",null,"If you are not running a systemd cluster and logs aren't collected via systemd, then you can view the logs in the following locations on the cp node:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/var/log/kube-apiserver.log")," for kube-apiserver logs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/var/log/kube-scheduler.log")," for kube-scheduler logs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/var/log/kube-controller-manager.log")," for kube-controller-manager logs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/var/log/containers/")," is the directory for any running container logs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/var/log/pods/")," is the directory for any running pod logs")),(0,o.kt)("p",null,"On the worker node, you would also be able to see ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/log/kubelet.log")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/log/kube-proxy.log"),"."),(0,o.kt)("h3",{id:"132---viewing-log-output"},"13.2 - Viewing log output"),(0,o.kt)("p",null,"To view logs from running pods you can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," like so:"),(0,o.kt)(r.o,{lines:[{text:"kubectl get pods --all-namespaces"},{text:"kubectl -n <namespace of pod> logs <pod name from desired ns>"}],mdxType:"Terminal"}),(0,o.kt)("h3",{id:"133---adding-tools-for-monitoring-and-metrics"},"13.3 - Adding tools for monitoring and metrics"),(0,o.kt)("p",null,"Start by cloning the metrics-server repo and viewing the ",(0,o.kt)("inlineCode",{parentName:"p"},"README")),(0,o.kt)(r.o,{lines:[{text:"git clone https://github.com/kubernetes-sigs/metrics-server.git"},{text:"cd metrics-server"},{text:"cat README.md"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"Once you've read the README, install the required objects and verify they are there. Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"latest")," in the URL with a specific version if you need an older version."),(0,o.kt)(r.o,{lines:[{text:"kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml"},{text:"kubectl -n kube-system get pods"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"Now edit the deployment to allow for insecure TLS.  Do this by adding ",(0,o.kt)("inlineCode",{parentName:"p"},"- --kubelet-insecure-tls")," to the end of the container args.  You may also need to add ",(0,o.kt)("inlineCode",{parentName:"p"},"- --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname")," as well. Once edited, make sure the pod is still running and not showing any errors in the logs."),(0,o.kt)(r.o,{lines:[{text:"kubectl -n kube-system edit deployment metrics-server"},{text:"kubectl -n kube-system get pods"},{text:"kubectl -n kube-system logs <metrics-server pod name>"}],mdxType:"Terminal"}),(0,o.kt)("p",null,"Now check that the metrics for the nods and pods. Sometimes it may take a few minutes for the metrics to populate and not throw an error."),(0,o.kt)(r.o,{lines:[{text:"sleep 120"},{text:"kubectl top pods --all-namespaces"},{text:"kubectl top nodes"}],mdxType:"Terminal"}),(0,o.kt)("h4",{id:"configure-dashboard"},"Configure dashboard"))}m.isMDXComponent=!0}}]);