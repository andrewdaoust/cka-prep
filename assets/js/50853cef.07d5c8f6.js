"use strict";(self.webpackChunkcka_prep_2=self.webpackChunkcka_prep_2||[]).push([[2544],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=i.createContext({}),s=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=o,f=p["".concat(d,".").concat(h)]||p[h]||c[h]||a;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7935:function(e,t,n){n.d(t,{o:function(){return o}});var i=n(7294);function o(e){return i.createElement("div",{style:{borderRadius:"10px"}},i.createElement(r,null),i.createElement(d,{lines:e.lines}))}function a(e){return i.createElement("div",{style:{backgroundColor:e.buttonColor,borderRadius:"100%",width:"10px",height:"10px",margin:"3px"}})}function r(){return i.createElement("div",{style:{display:"flex",backgroundColor:"#edeeef",padding:"6px",borderTopLeftRadius:"10px",borderTopRightRadius:"10px"}},i.createElement(a,{buttonColor:"#FF605C"}),i.createElement(a,{buttonColor:"#FFBD44"}),i.createElement(a,{buttonColor:"#00CA4E"}))}function l(e){var t=e.dir?e.dir:"~";return i.createElement("p",{style:{margin:"0px",padding:"2px"}},t+":$ "+e.text)}function d(e){console.log(e.lines);var t=e.lines.map((function(e){return i.createElement(l,{text:e.text,dir:e.dir})}));return i.createElement("div",{style:{backgroundColor:"black",color:"#00ff01",fontFamily:"monospace",borderBottomLeftRadius:"10px",borderBottomRightRadius:"10px",paddingTop:"5px",paddingBottom:"5px",paddingLeft:"4px",marginBottom:"10px"}},t)}},7776:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return h}});var i=n(7462),o=n(3366),a=(n(7294),n(3905)),r=n(7935),l=["components"],d={id:"chapter12",title:"Scheduling"},s=void 0,u={unversionedId:"fundamentals/chapter12",id:"fundamentals/chapter12",title:"Scheduling",description:"Course Reading",source:"@site/docs/fundamentals/chapter12.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/chapter12",permalink:"/cka-prep/docs/fundamentals/chapter12",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fundamentals/chapter12.mdx",tags:[],version:"current",frontMatter:{id:"chapter12",title:"Scheduling"},sidebar:"tutorialSidebar",previous:{title:"Ingress",permalink:"/cka-prep/docs/fundamentals/chapter11"},next:{title:"Logging and Troubleshooting",permalink:"/cka-prep/docs/fundamentals/chapter13"}},c=[{value:"Course Reading",id:"course-reading",children:[{value:"Learning objectives",id:"learning-objectives",children:[],level:3},{value:"kube-scheduler",id:"kube-scheduler",children:[],level:3},{value:"Filtering (predicates)",id:"filtering-predicates",children:[],level:3},{value:"Scoring (Priorities)",id:"scoring-priorities",children:[],level:3},{value:"Scheduling Policies",id:"scheduling-policies",children:[],level:3},{value:"Pod specification",id:"pod-specification",children:[{value:"<code>nodeName</code> and <code>nodeSelector</code>",id:"nodename-and-nodeselector",children:[],level:4},{value:"<code>affinity</code>",id:"affinity",children:[],level:4},{value:"<code>tolerations</code>",id:"tolerations",children:[],level:4},{value:"<code>schedulerName</code>",id:"schedulername",children:[],level:4}],level:3},{value:"Specifying the node label",id:"specifying-the-node-label",children:[],level:3},{value:"Scheduler profiles",id:"scheduler-profiles",children:[],level:3},{value:"Pod affinity rules",id:"pod-affinity-rules",children:[{value:"<code>requiredDuringSchedulingIgnoredDuringExecution</code>",id:"requiredduringschedulingignoredduringexecution",children:[],level:4},{value:"<code>preferredDuringSchedulingIgnoredDuringExecution</code>",id:"preferredduringschedulingignoredduringexecution",children:[],level:4},{value:"<code>podAffinity</code>",id:"podaffinity",children:[],level:4},{value:"<code>podAntiAffinity</code>",id:"podantiaffinity",children:[],level:4}],level:3},{value:"Node affinity rules",id:"node-affinity-rules",children:[],level:3},{value:"Taints",id:"taints",children:[{value:"<code>NoSchedule</code>",id:"noschedule",children:[],level:4},{value:"<code>PreferNoSchedule</code>",id:"prefernoschedule",children:[],level:4},{value:"<code>NoExecute</code>",id:"noexecute",children:[],level:4}],level:3},{value:"Tolerations",id:"tolerations-1",children:[],level:3},{value:"Custom scheduler",id:"custom-scheduler",children:[],level:3}],level:2},{value:"Lab Exercises",id:"lab-exercises",children:[{value:"Lab 12.1 - Assign pods using labels",id:"lab-121---assign-pods-using-labels",children:[],level:3}],level:2}],p={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"course-reading"},"Course Reading"),(0,a.kt)("h3",{id:"learning-objectives"},"Learning objectives"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Learn how the kube-scheduler schedules pods"),(0,a.kt)("li",{parentName:"ul"},"Use labels to manage the scheduling of pods"),(0,a.kt)("li",{parentName:"ul"},"Configure taints and tolerations"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"podAffinity")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"podAntiAffinity")),(0,a.kt)("li",{parentName:"ul"},"Understand how to run multiple schedulers")),(0,a.kt)("h3",{id:"kube-scheduler"},"kube-scheduler"),(0,a.kt)("p",null,"Scheduling becomes more important as a deployment of Kubernetes grows and becomes more diverse.  It's the kube-scheduler that handles this task."),(0,a.kt)("p",null,"Users are able to set pod priority, which allows other less important pods to be evicted if need be so that the higher priority pod can be scheduled.  The scheduler will keep track of the nodes in your cluster, filters them, and then uses priority functions to determine the best node to schedule a pod on.  Once determines, the pod specification is sent to that node's kubelet to be created."),(0,a.kt)("p",null,"Scheduling decisions can be influenced by using labels on either the node or pod.  Labels for podAffinity, taints, and bindings allow more configuration of how a pod is assigned to a node. These labels do not have to be drastic either, they can serve the function, for example, of stating a preference of a Pod one where to be scheduled, but if that can not occur it could be scheduled somewhere else.  We will oftentimes see ",(0,a.kt)("em",{parentName:"p"},"require")," used in the name of parameters, but in reality this is more of a preference. Some setting will also evict pods if the conditions are no longer met (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"requiredDuringScheduling")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"requiredDuringExecution"),")."),(0,a.kt)("p",null,"Custom schedulers can also be configured but need to be added to the cluster manually."),(0,a.kt)("h3",{id:"filtering-predicates"},"Filtering (predicates)"),(0,a.kt)("p",null,"The scheduler runs through a list of filters, or ",(0,a.kt)("strong",{parentName:"p"},"predicates"),", to find which nodes are available, and then ranks the nodes using priority functions.  The node that ranks the highest is chosen by the scheduler. "),(0,a.kt)("p",null,"The following are the predicates used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PodFitsHostPorts"),(0,a.kt)("li",{parentName:"ul"},"PodFitsHost"),(0,a.kt)("li",{parentName:"ul"},"PodFitsResources"),(0,a.kt)("li",{parentName:"ul"},"MatchNodeSelector"),(0,a.kt)("li",{parentName:"ul"},"NoVolumeZoneConflict"),(0,a.kt)("li",{parentName:"ul"},"NoDiskConflict"),(0,a.kt)("li",{parentName:"ul"},"MaxCSIVolumeCount"),(0,a.kt)("li",{parentName:"ul"},"PodToleratesNodeTaints"),(0,a.kt)("li",{parentName:"ul"},"CheckVolumeBinding")),(0,a.kt)("p",null,"The predicates are evaluated in an order, which can be configured. This allows for the least amount of checks possible for the scheduler."),(0,a.kt)("p",null,"These predicates work to filter out the nodes for certain conditions. For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"PodFitsResources")," would filter out any nodes that do not have the required resources for the pod pending creation."),(0,a.kt)("p",null,"Prior to v1.23 you could use a ",(0,a.kt)("inlineCode",{parentName:"p"},"kind: Policy")," to order and give weight to certain predicates. Policies are now depreciated."),(0,a.kt)("h3",{id:"scoring-priorities"},"Scoring (Priorities)"),(0,a.kt)("p",null,"Priorities are used to weight resources. Unless the SelectorSpreadPriority (ranks nodes based on number of existing running pods) setting has been configured with pod and node affinity, the node with the least amount of pods will be chosen, which is a basic way of spreading pods about the cluster."),(0,a.kt)("p",null,"Different priorities are used depending on cluster needs. For example, you could use an ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageLocalityPriority")," to favor nodes that have a container's image already downloaded."),(0,a.kt)("p",null,"The list of priorities that can be used are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SelectorSpreadPriority"),(0,a.kt)("li",{parentName:"ul"},"InterPodAffinityPriority"),(0,a.kt)("li",{parentName:"ul"},"LeastRequestedPriority"),(0,a.kt)("li",{parentName:"ul"},"MostRequestedPriority"),(0,a.kt)("li",{parentName:"ul"},"RequestedToCapacityRatioPriority"),(0,a.kt)("li",{parentName:"ul"},"BalancedResourceAllocation"),(0,a.kt)("li",{parentName:"ul"},"NodePreferAvoidPodsPriority"),(0,a.kt)("li",{parentName:"ul"},"NodeAffinityPriority"),(0,a.kt)("li",{parentName:"ul"},"TaintTolerationPriority"),(0,a.kt)("li",{parentName:"ul"},"ImageLocalityPriority"),(0,a.kt)("li",{parentName:"ul"},"ServiceSpreadingPriority"),(0,a.kt)("li",{parentName:"ul"},"EqualPriority"),(0,a.kt)("li",{parentName:"ul"},"EvenPodsSpreadPriority")),(0,a.kt)("p",null,"More detail on what each of these priorities do can be ",(0,a.kt)("a",{parentName:"p",href:"https://v1-22.docs.kubernetes.io/docs/reference/scheduling/policies/#priorities"},"found here"),"."),(0,a.kt)("p",null,"Prior to v1.23 you could use a ",(0,a.kt)("inlineCode",{parentName:"p"},"kind: Policy")," to specify the priorities to use in scoring.  As noted before, this is depreciated."),(0,a.kt)("h3",{id:"scheduling-policies"},"Scheduling Policies"),(0,a.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Scheduling policies were ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/scheduling/policies/"},"depreciated after v1.23")," in favor of scheduler configuration so newer versions will not have this capability. See more on scheduler configuration ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/scheduling/config/"},"here"),"."))),(0,a.kt)("p",null,"By default, the scheduler has predicates and priorities it uses; these can be changed with scheduler policies however."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "kind" : "Policy",\n    "apiVersion" : "v1",\n    "predicates" : [\n        {"name" : "MatchNodeSelector", "order": 6},\n        {"name" : "PodFitsHostPorts", "order": 2},\n        {"name" : "PodFitsResources", "order": 3},\n        {"name" : "NoDiskConflict", "order": 4},\n        {"name" : "PodToleratesNodeTaints", "order": 5},\n        {"name" : "PodFitsHost", "order": 1}\n    ],\n    "priorities" : [\n        {"name" : "LeastRequestedPriority", "weight" : 1},\n        {"name" : "BalancedResourceAllocation", "weight" : 1},       \n        {"name" : "ServiceSpreadingPriority", "weight" : 2},\n        {"name" : "EqualPriority", "weight" : 1}   \n    ],\n    "hardPodAffinitySymmetricWeight" : 10\n}\n')),(0,a.kt)("p",null,"Typically, you would use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--policy-config-file")," to pass the files and the ",(0,a.kt)("inlineCode",{parentName:"p"},"--scheduler-name")," to give the scheduler a name. You'd then have two schedulers running and can specify which to use in the pod specification."),(0,a.kt)("p",null,"Having multiple schedulers opens up the potential for conflict in allocation of pods.  Each pod should declare which scheduler it should use, but if not and separate schedulers determine that a node is eligible, and both deploy to it and then cause the resources to no longer exist, then a conflict occurs. The local kubelet would then return these pods to the scheduler to reassign until eventually one succeeds and another node is chosen for the other pod."),(0,a.kt)("h3",{id:"pod-specification"},"Pod specification"),(0,a.kt)("p",null,"Most scheduling decisions are made off what's defined in the podSpec.  The fields that carry much of the weight for this are:"),(0,a.kt)("h4",{id:"nodename-and-nodeselector"},(0,a.kt)("inlineCode",{parentName:"h4"},"nodeName")," and ",(0,a.kt)("inlineCode",{parentName:"h4"},"nodeSelector")),(0,a.kt)("p",null,"These options allow a Pod to be assigned to a single node or a node with a certain label."),(0,a.kt)("h4",{id:"affinity"},(0,a.kt)("inlineCode",{parentName:"h4"},"affinity")),(0,a.kt)("p",null,"Affinity and anti-affinity can be used to set a requirement or preference for which nodes to schedule to.  If using a preference, the matching node is chosen first, but other nodes are used if no match is found."),(0,a.kt)("h4",{id:"tolerations"},(0,a.kt)("inlineCode",{parentName:"h4"},"tolerations")),(0,a.kt)("p",null,"Taints are placed on nodes so pods are not scheduled there for whatever reason.  Tolerations allow pods to ignore the taint and be scheduled on that node as long as other requirements for scheduling are met."),(0,a.kt)("h4",{id:"schedulername"},(0,a.kt)("inlineCode",{parentName:"h4"},"schedulerName")),(0,a.kt)("p",null,"If you want to define the use of a custom scheduler, you could use the ",(0,a.kt)("inlineCode",{parentName:"p"},"schedulerName")," field to do so."),(0,a.kt)("h3",{id:"specifying-the-node-label"},"Specifying the node label"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeSelector")," field is a straightforward way to to target a nde or set of nodes for scheduling.  It used one or more key-value labels."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  containers:\n  - name: redis\n    image: redis\n  nodeSelector:\n    net: fast\n")),(0,a.kt)("p",null,"In the example we are using the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeSelector")," to target any nodes with a ",(0,a.kt)("inlineCode",{parentName:"p"},"net")," label and value of ",(0,a.kt)("inlineCode",{parentName:"p"},"fast"),". Reminder that these labels and values are administrator created and are not actually necessarily tied to any properties of the hardware of the node."),(0,a.kt)("p",null,"A pod remains in a pending state until a node is found with matching labels."),(0,a.kt)("p",null,"You should be able to use node affinity to do the same thing as a ",(0,a.kt)("inlineCode",{parentName:"p"},"nodSelector"),"."),(0,a.kt)("h3",{id:"scheduler-profiles"},"Scheduler profiles"),(0,a.kt)("p",null,"The scheduler can also be configured via scheduling profiles. They allow for configuration of ",(0,a.kt)("strong",{parentName:"p"},"extension points")," where plugins can be used.  An extension point is one of the 12 stages of scheduling, where a plugin can be used to modify the of a scheduler.  The 12 are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"queueSort"),(0,a.kt)("li",{parentName:"ul"},"perFilter"),(0,a.kt)("li",{parentName:"ul"},"filter"),(0,a.kt)("li",{parentName:"ul"},"postFilter"),(0,a.kt)("li",{parentName:"ul"},"preScore"),(0,a.kt)("li",{parentName:"ul"},"score"),(0,a.kt)("li",{parentName:"ul"},"reserve"),(0,a.kt)("li",{parentName:"ul"},"permit"),(0,a.kt)("li",{parentName:"ul"},"preBind"),(0,a.kt)("li",{parentName:"ul"},"bind"),(0,a.kt)("li",{parentName:"ul"},"postBind"),(0,a.kt)("li",{parentName:"ul"},"multiPoint")),(0,a.kt)("p",null,"Many plugins are enabled by default, and others can be enabled, to change how the scheduler chooses a node for a give podSpec.  The current plugin list can be ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/scheduling/config/#profiles"},"found here"),"."),(0,a.kt)("p",null,"A scheduler can have multiple profiles enabled, which potentially removes the need of having multiple schedulers.Each podSpec would need to declare a profile to use, otherwise the ",(0,a.kt)("inlineCode",{parentName:"p"},"default-scheduler")," is used if none is configured."),(0,a.kt)("p",null,"Profiles are what have replaced policies."),(0,a.kt)("h3",{id:"pod-affinity-rules"},"Pod affinity rules"),(0,a.kt)("p",null,"An example of affinity may be desiring two pods to be co-located since they often communicate and share data."),(0,a.kt)("p",null,"An example of anti-affinity would be wanting two pods running on separate nodes to increase fault tolerance."),(0,a.kt)("p",null,"These settings are used by the scheduler to look at the pods currently running and their labels. The scheduler then must interrogate each node and keep track of the labels on running nodes, and because of this, clusters larger than several hundred nodes can see significant performance degradation.  Pod affinity rules use ",(0,a.kt)("inlineCode",{parentName:"p"},"In"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"NotIn"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Exists"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"DoesNotExist")," operators."),(0,a.kt)("h4",{id:"requiredduringschedulingignoredduringexecution"},(0,a.kt)("inlineCode",{parentName:"h4"},"requiredDuringSchedulingIgnoredDuringExecution")),(0,a.kt)("p",null,"The pod will not be scheduled to a node unless the operator is true.  If the operator becomes false in the future, the pod continues to run. This can be seen as a hard setting."),(0,a.kt)("h4",{id:"preferredduringschedulingignoredduringexecution"},(0,a.kt)("inlineCode",{parentName:"h4"},"preferredDuringSchedulingIgnoredDuringExecution")),(0,a.kt)("p",null,"Similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"requiredDuringSchedulingIgnoredDuringExecution"),", but if no node with the desired setting is present, it will be scheduled anyway.  This declares a preference rather than requirement."),(0,a.kt)("h4",{id:"podaffinity"},(0,a.kt)("inlineCode",{parentName:"h4"},"podAffinity")),(0,a.kt)("p",null,"This is used to schedule pods together on the same node."),(0,a.kt)("h4",{id:"podantiaffinity"},(0,a.kt)("inlineCode",{parentName:"h4"},"podAntiAffinity")),(0,a.kt)("p",null,"And this is used to keep pods from being scheduled on the same node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: security\n            operator: In\n            values:\n            - S1\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: security\n              operator: In\n              values:\n              - S2\n")),(0,a.kt)("p",null,"Here is an example of pod affinity where a specific label needs to be matched for the Pod to be scheduled and started.  However, this label could be removed in the future and the Pod would still run."),(0,a.kt)("p",null,"If no node is found with another pod running with a ",(0,a.kt)("inlineCode",{parentName:"p"},"security=S1")," label, then the pod remains unscheduled and ",(0,a.kt)("inlineCode",{parentName:"p"},"pending")," until the condition is met."),(0,a.kt)("p",null,"In the pod anti affinity example, it is preferred that a node with no pods matching a ",(0,a.kt)("inlineCode",{parentName:"p"},"security=S1")," label be found.  Also, because this is a preference, the pod will still run, but we are able to provide a weight to influence the scheduler.  Weights can be from 1 to 100."),(0,a.kt)("h3",{id:"node-affinity-rules"},"Node affinity rules"),(0,a.kt)("p",null,"Aside from pod to pod affinity, we can also have pod to node affinity, which is managed by ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeAffinity"),".  It is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeSelector")," and should one day replace it in later versions of the API.  Instead of labels on other pods, ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeAffinity")," uses the labels on the nodes, so there is much less performance impact than with pod affinity."),(0,a.kt)("p",null,"Node affinity also uses the operators ",(0,a.kt)("inlineCode",{parentName:"p"},"In"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"NotIn"),", 'Exists",(0,a.kt)("inlineCode",{parentName:"p"},"and"),"DoesNotExist",(0,a.kt)("inlineCode",{parentName:"p"},". "),"requiredDuringSchedulingIgnoredDuringExecution",(0,a.kt)("inlineCode",{parentName:"p"},"and"),"preferredDuringSchedulingIgnoredDuringExecution` are also applicable for node affinity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: discspeed\n            operator: In\n            values:\n            - quick\n            - fast\n")),(0,a.kt)("p",null,"Here in our example, our pod to be scheduled will prefer nodes that have a label with key ",(0,a.kt)("inlineCode",{parentName:"p"},"discspeed")," and a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"fast")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"quick"),"."),(0,a.kt)("h3",{id:"taints"},"Taints"),(0,a.kt)("p",null,"Taints are the opposite of node affinity."),(0,a.kt)("p",null,"To repel a pod from being deploy on a node you can set a taint. Pod will not be scheduled to that node unless they have the proper toleration, nor will the node even be considered. Taints are configured as ",(0,a.kt)("inlineCode",{parentName:"p"},"key=value:effect"),". Any valid ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," label can be used for the taint. "),(0,a.kt)("p",null,"There are three kinds of effects that can be applied for a taint. For any node that has multiple taints, the scheduler just ignores the ones with matching tolerations and allow the others to still take effect.  "),(0,a.kt)("h4",{id:"noschedule"},(0,a.kt)("inlineCode",{parentName:"h4"},"NoSchedule")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"NoSchedule")," effect will not schedule the pod on a matching node, unless the Pod has a toleration of this type.  Existing pods will continue to run regardless of toleration."),(0,a.kt)("h4",{id:"prefernoschedule"},(0,a.kt)("inlineCode",{parentName:"h4"},"PreferNoSchedule")),(0,a.kt)("p",null,'A "soft" version of ',(0,a.kt)("inlineCode",{parentName:"p"},"NoSchedule"),". The node with this taint will be avoided if possible. It is a preference, rather than requirement."),(0,a.kt)("h4",{id:"noexecute"},(0,a.kt)("inlineCode",{parentName:"h4"},"NoExecute")),(0,a.kt)("p",null,"This taint will evacuate all existing pods and not allow future pods to be scheduled, except those with the correct toleration.  Pods with a ",(0,a.kt)("inlineCode",{parentName:"p"},"tolerationSeconds")," set will wait however many configured seconds before eviction. Certain issues on a node may cause the kubelet to add 300 seconds tolerations to prevent unnecessary evictions."),(0,a.kt)("h3",{id:"tolerations-1"},"Tolerations"),(0,a.kt)("p",null,"Tolerations can be set on a pod to negate the effect of a taint on the node."),(0,a.kt)("p",null,"Tolerations can take two different operators, ",(0,a.kt)("inlineCode",{parentName:"p"},"Equal")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Exists"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Equal")," is the default if an operator is not declared."),(0,a.kt)("p",null,"Here's two examples of tolerations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=equal-toleration.yaml",title:"equal-toleration.yaml"},'tolerations:\n- key: "region"\n  operator: "Equal"\n  value: "us-east-1"\n  effect: "NoExecute"\n  tolerationSeconds: 3600\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=exists-toleration.yaml",title:"exists-toleration.yaml"},'tolerations:\n- key: "example-key"\n  operator: "Exists"\n  effect: "NoSchedule"\n')),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Equal")," example, the pod will tolerate any nodes with a ",(0,a.kt)("inlineCode",{parentName:"p"},"NoExecute")," taint for 3600 seconds and a label of ",(0,a.kt)("inlineCode",{parentName:"p"},"region=us-east-1"),"."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Exists")," example, no value is taken, as the ",(0,a.kt)("inlineCode",{parentName:"p"},"Exist")," just looks for the existence of the label key.  If no key was specified, the pod would tolerate all nodes with the configured effect."),(0,a.kt)("h3",{id:"custom-scheduler"},"Custom scheduler"),(0,a.kt)("p",null,"If the affinity and taints are not flexible enough you can write a custom scheduler. This is outside the scope of the fundamentals of Kubernetes, but a good starting point is the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/kubernetes/tree/master/pkg/scheduler"},"existing scheduling code"),"."),(0,a.kt)("p",null,"If a podSpec does not declare the scheduler to use, then the default is chosen. If the pod declares a scheduler that is not running, it would sit as ",(0,a.kt)("inlineCode",{parentName:"p"},"Pending")," forever."),(0,a.kt)("p",null,"At the end of scheduling, the pod gets a binding specifying which pod it should run on.  Bindings are Kubernetes primitives in the ",(0,a.kt)("inlineCode",{parentName:"p"},"api/v1")," group.  You could technically still schedule a pod without a scheduler running by defining a binding yourself."),(0,a.kt)("p",null,"Multiple schedulers can be running at the same time. The scheduler can be views along with other information by running ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get events"),"."),(0,a.kt)("h2",{id:"lab-exercises"},"Lab Exercises"),(0,a.kt)("h3",{id:"lab-121---assign-pods-using-labels"},"Lab 12.1 - Assign pods using labels"),(0,a.kt)("p",null,"This lab will walk through scheduling pods on specific nodes using labels.  While it is normally best to let the system distribute pods for you, sometimes there may be exceptions to this.  For example, you may want a pod to run on a certain node due to hardware considerations."),(0,a.kt)("p",null,"First, let's get our list of nodes and view their current labels and taints."),(0,a.kt)(r.o,{lines:[{text:"kubectl get nodes"},{text:"kubectl describe nodes | grep -A5 -i labels"},{text:"kubectl describe nodes |grep -i taint"}],mdxType:"Terminal"}),(0,a.kt)("p",null,"Find the count of how many pods are running on each node. Take node of the difference."),(0,a.kt)(r.o,{lines:[{text:'kubectl describe node <cp node name> | grep "Non-terminated Pods"'},{text:'kubectl describe node <worker node name> | grep "Non-terminated Pods"'}],mdxType:"Terminal"}),(0,a.kt)("p",null,"For this exercice, we will make the cp node exclusive for VIP pods, and the worker for everything else. Then verify your new labels."),(0,a.kt)(r.o,{lines:[{text:"kubectl label nodes <cp node name> status=vip"},{text:"kubectl label nodes <worker node name> status=other"},{text:"kubectl get nodes --show-labels"}],mdxType:"Terminal"}),(0,a.kt)("p",null,"Now, let's create a new Pod running four ",(0,a.kt)("inlineCode",{parentName:"p"},"busybox")," containers. We'll use ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeSelector")," to choose the node we want to deploy on."),(0,a.kt)(r.o,{lines:[{text:"vim vip.yaml"}],mdxType:"Terminal"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="vip.yaml"',title:'"vip.yaml"'},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: vip\nspec:\n  containers:\n  - name: vip1\n    image: busybox\n    args:\n    - sleep\n    - "1000000"\n  - name: vip2\n    image: busybox\n    args:\n    - sleep\n    - "1000000"\n  - name: vip3\n    image: busybox\n    args:\n    - sleep\n    - "1000000"\n  - name: vip4\n    image: busybox\n    args:\n    - sleep\n    - "1000000"\n  nodeSelector:\n    status: vip\n')),(0,a.kt)("p",null,"Then deploy the Pod and verify it was deployed on the cp node. You should see an additional pod running on the cp and no change on the worker."),(0,a.kt)(r.o,{lines:[{text:"kubectl create -f vip.yaml"},{text:'kubectl describe node <cp node name> | grep "Non-terminated Pods"'},{text:'kubectl describe node <worker node name> | grep "Non-terminated Pods"'}],mdxType:"Terminal"}),(0,a.kt)("p",null,"Delete the pod, comment out ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeSelector"),", then recreate the deployment. The Pod should be able to schedule on either node now."),(0,a.kt)(r.o,{lines:[{text:"kubectl delete pod vip"},{text:"vim vip.yaml"},{text:"kubectl create -f vip.yaml"},{text:'kubectl describe node <cp node name> | grep "Non-terminated Pods"'},{text:'kubectl describe node <worker node name> | grep "Non-terminated Pods"'}],mdxType:"Terminal"}))}h.isMDXComponent=!0}}]);